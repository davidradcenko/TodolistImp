{"version":3,"sources":["api/TodolistAPI.ts","reportWebVitals.ts","utils/error-utils.ts","Login/login-reducer.ts","State/app-reducer.ts","State/todolists-reducer.ts","State/tasks-reducer.ts","State/store.ts","ErrorSnakBar.tsx","AddItemForm.tsx","EditableSpan.tsx","TaskMap.tsx","Todolists.tsx","TodolistList.tsx","Login/Login.tsx","AppWhisRedux.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","Object","objectSpread","baseURL","withCredentials","headers","API-KEY","TodolistAPI","get","title","post","id","delete","concat","put","todolistId","taskId","tidilistId","model","taskTitle","authAPI","data","handelServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handelServerNetworkError","error","message","initialState","isLoginIn","setIsLoginIn","value","type","logoutTC","res","resultCode","catch","status","initialized","initializeAppTC","dispath","todolistId1","uuidv4","defineProperty","Completed","todoListId","startDate","deadline","addedDate","order","priority","Low","description","updateTaskStatusTC","idTodo","domainmodel","idTask","getState","task","tasks","find","t","apimodel","updateTaskAC","rootReducer","combineReducers","todolists","state","arguments","undefined","action","filter","NewTodo","entityStatus","toConsumableArray","map","tl","isDone","todolist","stateCopy","n","newTask","T","newTodoTasks","stateCope","Todolisttasks","statyCope","forEach","app","login","store","createStore","applyMiddleware","thunk","useAppDispatch","useDispatch","useSelector","window","Alert","React","props","ref","react","Alert_Alert","assign","elevation","variant","CustomizedSnackbars","handleClose","event","reason","IsOpen","Stack","spacing","sx","width","Snackbar","open","autoHideDuration","onClose","ErrorSnakBar_Alert","severity","AddItemForm","memo","console","log","_useState","useState","_useState2","slicedToArray","ButtonAdd","SetButtonAdd","_useState3","_useState4","ErrorMesage","SetErrorMessage","OnClikOnbutton","trim","AddItem","react_default","a","createElement","TextField","onKeyPress","charCode","label","onChange","currentTarget","ChengeSetButtonAdd","IconButton","onClick","color","ControlPoint","EditableSpan","SetEditableSpan","Title","SetTitle","onDoubleClick","ChengeInput","onBlur","ChengeTaskName","autoFocus","TaskMap","deleteFun","useCallback","removeTask","TodolistId","SaveInputChekedNameHendler","NewName","onChangeStatus","newIsDoneValue","checked","chengeChecked","New","key","className","Checkbox","EditableSpan_EditableSpan","Delete","Todolists","ChegeTitleTodo","Newtitle","ChengeTitleTodo","addTask","AddNewTodoTask","FilterAll","FilterChenge","FilterCompleted","FilterActive","TaskForTodolist","useEffect","items","SetTasksAC","DeleteTodo","disabled","Button","TodolistList","isLoggedIn","TodolistData","tasksObj","TaskId","deleteTasksTC","item","AddTaskAC","addTaskTC","NewTitle","ChengeTitleTodoAC","ChengeTaskTitle","IdTodo","chengeTaskChecked","chengeTasksFilter","AddTodolistButtonProps","addTodolistTC","Fragment","Grid","container","style","padding","taskfortodolist","Paper","dist","to","Login","formik","useFormik","validate","values","errors","email","test","initialValues","password","rememberMe","onSubmit","Box","flexGrow","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","AppWhisRedux","isInitialized","logoutHandler","react_router_dom_dist","AppBar","position","Toolbar","edge","aria-label","Menu_default","Typography","LinearProgress","Container","fixed","path","element","TodolistList_TodolistList","Login_Login","top","textAlign","CircularProgress","ReactDOM","createRoot","document","getElementById","render","es","src_AppWhisRedux"],"mappings":"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","file":"static/js/main.84e0d200.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '865054b3-8839-41aa-aa3c-1dce403daa1b'\r\n    }\r\n}\r\nconst instance=axios.create({\r\n    baseURL:\"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings,\r\n})\r\n\r\n//api\r\nexport const TodolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistAPIType>>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistAPIType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTaskRespons>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId:string,taskId:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    updateTask(tidilistId:string,taskId:string,model:updateTaskModelType){\r\n        return instance.put<ResponseType>(`todo-lists/${tidilistId}/tasks/${taskId}`,model);\r\n    },\r\n    createTask(todolistId:string,taskTitle:string){\r\n        return instance.post<ResponseType<{ item:TaskType }>>(`todo-lists/${todolistId}/tasks`,{title:taskTitle});\r\n    }\r\n\r\n}\r\nexport type LoginParamsType={\r\n    email:string,\r\n    password:string,\r\n    rememberMe:boolean,\r\n    captcha?:boolean\r\n}\r\nexport const authAPI={\r\n    login(data:LoginParamsType){\r\n        const promise=instance.post<ResponseType<{userId?:number}>>('auth/login',data)\r\n        return promise\r\n    },\r\n    me(){\r\n        const promise= instance.get<ResponseType<{id:number,email:string,login:number}>>('auth/me')\r\n        return promise\r\n    },\r\n    logout(){\r\n        const promise= instance.delete<ResponseType<{userId?:number}>>('auth/login')\r\n        return promise\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype GetTaskRespons = {\r\n    error: string | null,\r\n    totalCount:number,\r\n    items:TaskType[]\r\n\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport type TaskType={\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type updateTaskModelType={\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type TodolistAPIType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number\r\n}\r\n\r\nexport enum TaskStatuses{\r\n    New=0,\r\n    InProgress=1,\r\n    Completed=2,\r\n    Draft=3\r\n}\r\nexport enum TaskPriorities{\r\n    Low=0,\r\n    Middle=1,\r\n    Hi=2,\r\n    Urgently=3,\r\n    Later=4\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {ResponseType} from '../api/TodolistAPI'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../State/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handelServerAppError = <D>(data: ResponseType<D>, dispatch:Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred\"))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handelServerNetworkError = (error: {message:string}, dispatch:Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message:\"Some error occurred\"))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {authAPI, LoginParamsType, TaskType, TodolistAPI} from \"../api/TodolistAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../State/app-reducer\";\r\nimport {handelServerAppError, handelServerNetworkError} from \"../utils/error-utils\";\r\nimport {updateTaskAC} from \"../State/tasks-reducer\";\r\n\r\n\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoginIn:false,\r\n\r\n}\r\n\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGIN-IN\":{\r\n            return {...state,isLoginIn:action.value}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const setIsLoginIn = (value:boolean) => ({type: \"login/SET-IS-LOGIN-IN\", value}) as const\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data:LoginParamsType) => {\r\n    return (dispatch: Dispatch<ActionTypes | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        authAPI.login(data).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoginIn(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handelServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handelServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const logoutTC=() => {\r\n    return (dispatch: Dispatch<ActionTypes | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        authAPI.logout().then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoginIn(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handelServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handelServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n//types\r\nexport type ActionTypes =\r\n    ReturnType<typeof setIsLoginIn>\r\n\r\ntype InitialStateType={\r\n    isLoginIn:boolean\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/TodolistAPI\";\r\nimport {setIsLoginIn} from \"../Login/login-reducer\";\r\n\r\nconst initialState:InitialStateType = {\r\n    status: 'idle' ,\r\n    error: null,\r\n    initialized:false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state,error:action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state,initialized:action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// Actions\r\nexport  const setAppErrorAC = (error:string | null)=>({type:'APP/SET-ERROR',error} as const )\r\nexport  const setAppStatusAC = (status:RequestStatusType)=>({type:'APP/SET-STATUS',status} as const )\r\nexport  const SetAppInitializedAC = (value:boolean)=>({type:'APP/SET-INITIALIZED',value} as const )\r\n\r\n\r\nexport  type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type SetAppInitializedActionType = ReturnType<typeof SetAppInitializedAC>;\r\n\r\n//THUNK\r\nexport const initializeAppTC=()=>(dispath:Dispatch)=>{\r\n    authAPI.me().then(res=>{\r\n        if (res.data.resultCode === 0){\r\n         dispath(setIsLoginIn(true))\r\n         }else {\r\n\r\n        }\r\n    dispath(SetAppInitializedAC(true))\r\n})\r\n}\r\n\r\n\r\n\r\n// types\r\ntype ActionsType = SetAppErrorActionType | SetAppStatusActionType |SetAppInitializedActionType\r\nexport type RequestStatusType= 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n    initialized:boolean\r\n}","import {v1 as uuidv4, v4} from \"uuid\";\r\nimport {TodolistAPI, TodolistAPIType} from \"../api/TodolistAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {handelServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nexport let todolistId1 = uuidv4()\r\nexport let todolistId2 = uuidv4()\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nexport const todolistsRedusers = (state: Array<TodolistDomainType> = initialState, action: ActionTypes): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'Remove-Todo': {\r\n            return state.filter(e => e.id != action.id)\r\n        }\r\n        case  'Add-Todo': {\r\n            const DomainTodo:TodolistDomainType={...action.NewTodo,filter:\"All\",entityStatus:'idle'}\r\n            return [DomainTodo,...state]\r\n        }\r\n        case 'ChengeTitle-Todo': {\r\n            return state.map(tl=>tl.id===action.id ? {...tl,title:action.title} : tl)\r\n        }\r\n        case 'Change-Isdone-Todo': {\r\n            return state.map(tl=>tl.id===action.id ? {...tl,filter:action.isDone} : tl)\r\n        }\r\n        case 'SET-TODOLIST': {\r\n            return action.todolist.map(tl => {\r\n                return {...tl, filter:\"All\",entityStatus:'idle'}\r\n            })\r\n        }\r\n        case 'CHENGE-TODOLIST-ENTITY-STATUS':{\r\n            return state.map(tl=>tl.id===action.id ? {...tl,entityStatus:action.status} : tl)\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Creator\r\nexport const RemoveTodoAC = (id: string) => ({type: \"Remove-Todo\", id}) as const\r\nexport const AddTodoAC = (NewTodo: TodolistAPIType) =>({type: \"Add-Todo\", NewTodo}) as const\r\nexport const ChengeTitleTodoAC = (id: string, title: string) => ({type: \"ChengeTitle-Todo\", id, title}) as const\r\nexport const ChangeIsdoneTodoAC = (isDone: FilterType, id: string) =>({type: \"Change-Isdone-Todo\", isDone, id})as const\r\nexport const SetTodolistAC = (todolist: Array<TodolistAPIType>) => ({type: \"SET-TODOLIST\", todolist}) as const\r\nexport const chengeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({type: \"CHENGE-TODOLIST-ENTITY-STATUS\",id,status}) as const\r\n\r\n// thunks\r\nexport const fetchTodolistTC=()=>{\r\n    return (dispatch:Dispatch<ActionTypes | SetAppStatusActionType>)=>{\r\n        dispatch(setAppStatusAC('loading'))\r\n        TodolistAPI.getTodolists().then(res=>{\r\n            dispatch(SetTodolistAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }).catch(error=>{\r\n            handelServerNetworkError(error,dispatch)\r\n        })\r\n    }\r\n}\r\nexport const deleteTodolistTC=(IdTodo:string)=>{\r\n    return (dispatch:Dispatch<ActionTypes| SetAppStatusActionType>)=>{\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(chengeTodolistEntityStatusAC(IdTodo,'loading'))\r\n        TodolistAPI.deleteTodolist(IdTodo).then(res=>{\r\n            dispatch(RemoveTodoAC(IdTodo))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n    }\r\n}\r\nexport const addTodolistTC=(title:string)=>{\r\n    return (dispatch:Dispatch<ActionTypes | SetAppStatusActionType>)=>{\r\n        dispatch(setAppStatusAC('loading'))\r\n        TodolistAPI.createTodolist(title).then(res=>{\r\n            dispatch(AddTodoAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n    }\r\n}\r\nexport const ChehgeTitleTodolistTC=(id: string, title: string)=>{\r\n    return (dispatch:Dispatch<ActionTypes>)=>{\r\n        TodolistAPI.updateTodolist(id, title).then(res=>{\r\n            dispatch(ChengeTitleTodoAC(id, title))\r\n        })\r\n    }\r\n}\r\n\r\n//types\r\nexport type FilterType = \"All\" | \"Completed\" | \"Active\";\r\ntype ActionTypes =\r\n    | ReturnType<typeof RemoveTodoAC>\r\n    | ReturnType<typeof AddTodoAC >\r\n    | ReturnType<typeof ChengeTitleTodoAC >\r\n    | ReturnType<typeof ChangeIsdoneTodoAC >\r\n    | ReturnType<typeof SetTodolistAC>\r\n    | ReturnType<typeof chengeTodolistEntityStatusAC>\r\n\r\nexport type TodolistDomainType = TodolistAPIType & {\r\n    filter: FilterType,\r\n    entityStatus: RequestStatusType\r\n}","\r\nimport {v1 as uuidv4, v4} from \"uuid\";\r\nimport {AddTodoAC, RemoveTodoAC, SetTodolistAC, todolistId1, todolistId2} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, TodolistAPI, updateTaskModelType} from \"../api/TodolistAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootState} from \"./store\";\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {handelServerAppError, handelServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nexport type TodoTasksType={\r\n    [key:string]:Array<TaskType>\r\n}\r\nconst initialState: TodoTasksType = {\r\n    [todolistId1]: [\r\n        {\r\n            id: uuidv4(),\r\n            title: \"Frog1\",\r\n            status: TaskStatuses.Completed,\r\n            todoListId: todolistId1,\r\n            startDate: '',\r\n            deadline: '',\r\n            addedDate: '',\r\n            order: 0,\r\n            priority: TaskPriorities.Low,\r\n            description: ''\r\n        },\r\n        {\r\n            id: uuidv4(),\r\n            title: \"Frog2\",\r\n            status: TaskStatuses.Completed,\r\n            todoListId: todolistId1,\r\n            startDate: '',\r\n            deadline: '',\r\n            addedDate: '',\r\n            order: 0,\r\n            priority: TaskPriorities.Low,\r\n            description: ''\r\n        },\r\n        {\r\n            id: uuidv4(),\r\n            title: \"Frog3\",\r\n            status: TaskStatuses.Completed,\r\n            todoListId: todolistId1,\r\n            startDate: '',\r\n            deadline: '',\r\n            addedDate: '',\r\n            order: 0,\r\n            priority: TaskPriorities.Low,\r\n            description: ''\r\n        }\r\n    ]\r\n}\r\n\r\nexport const tasksRedusers = (state: TodoTasksType = initialState, action: ActionTypes): TodoTasksType => {\r\n    switch (action.type) {\r\n        case 'Remove-Task': {\r\n            const stateCopy = {...state}\r\n            let todo = stateCopy[action.idTodo]\r\n            let n = todo.filter(e => e.id != action.idTask)\r\n            stateCopy[action.idTodo] = n\r\n            return {...stateCopy}\r\n        }\r\n        case 'Add-Task': {\r\n            const stateCopy = {...state}\r\n            const newTask = action.task\r\n            let T = stateCopy[newTask.todoListId]\r\n            let newTodoTasks = [newTask, ...T]\r\n            stateCopy[newTask.todoListId] = newTodoTasks\r\n            return stateCopy\r\n        }\r\n        case 'UPDATE-TASK': {\r\n\r\n            let stateCope = {...state}\r\n            let Todolisttasks = stateCope[action.idTodo]\r\n            stateCope[action.idTodo] = Todolisttasks.map(t => t.id === action.idTask ? {...t, ...action.model} : t)\r\n            return stateCope\r\n        }\r\n        case \"Remove-Todo\": {\r\n            let stateCope = {...state}\r\n            delete stateCope[action.id]\r\n            return stateCope\r\n        }\r\n        case \"Add-Todo\": {\r\n            const statyCope = {...state}\r\n            statyCope[action.NewTodo.id] = []\r\n            return statyCope\r\n        }\r\n        case \"SET-TODOLIST\": {\r\n            const statyCope = {...state}\r\n            action.todolist.forEach(tl => {\r\n                statyCope[tl.id] = []\r\n            })\r\n            return statyCope\r\n        }\r\n        case \"SET-TASK\": {\r\n            const statyCope = {...state}\r\n            statyCope[action.todolistId] = action.tasks\r\n            return statyCope\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const RemoveTaskAC = (idTodo: string, idTask: string) => ({type: \"Remove-Task\", idTodo, idTask}) as const\r\nexport const AddTaskAC = (task: TaskType) => ({type: \"Add-Task\", task}) as const\r\nexport const updateTaskAC = (idTodo: string, model: updateDomainTaskModelType, idTask: string) => ({\r\n    type: \"UPDATE-TASK\",\r\n    idTodo,\r\n    model,\r\n    idTask\r\n}) as const\r\nexport const ChengeTaskTitleAC = (idTodo: string, idTask: string, name: string) => ({\r\n    type: \"CHENGE-TASK-TITLE\",\r\n    idTodo,\r\n    idTask,\r\n    name\r\n}) as const\r\nexport const SetTasksAC = (todolistId: string, tasks: Array<TaskType>) => ({\r\n    type: \"SET-TASK\",\r\n    todolistId,\r\n    tasks\r\n}) as const\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes | SetAppStatusActionType> ) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        TodolistAPI.getTasks(todolistId).then(res => {\r\n            const tasks = res.data.items\r\n            dispatch(SetTasksAC(todolistId, tasks))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n    }\r\n}\r\nexport const deleteTasksTC = (todolistId: string, TaskId: string) => {\r\n    return (dispatch: Dispatch<ActionTypes>) => {\r\n        TodolistAPI.deleteTask(todolistId, TaskId).then(res => {\r\n            dispatch(RemoveTaskAC(todolistId, TaskId))\r\n        })\r\n    }\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionTypes | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        TodolistAPI.createTask(todolistId, title).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(AddTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handelServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n            .catch((error)=>{\r\n                handelServerNetworkError(error,dispatch)\r\n            })\r\n    }\r\n}\r\nexport const updateTaskStatusTC = (idTodo: string, domainmodel: updateDomainTaskModelType, idTask: string) => {\r\n    return (dispatch: Dispatch<ActionTypes| SetAppErrorActionType | SetAppStatusActionType>, getState: () => RootState) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[idTodo].find(t => t.id === idTask)\r\n        if (!task) {\r\n            return\r\n        }\r\n        const apimodel: updateTaskModelType = {\r\n            title: task.title,\r\n            status: task.status,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            ...domainmodel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        TodolistAPI.updateTask(idTodo, idTask, apimodel).then(res => {\r\n            if (res.data.resultCode===0) {\r\n                dispatch(updateTaskAC(idTodo, domainmodel, idTask))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }else {\r\n                handelServerAppError(res.data,dispatch)\r\n            }\r\n        })\r\n            .catch((error)=>{\r\n                handelServerNetworkError(error,dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type updateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type ActionTypes =\r\n    | ReturnType<typeof AddTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof SetTasksAC>\r\n    | ReturnType<typeof RemoveTaskAC>\r\n\r\n    | ReturnType<typeof RemoveTodoAC>\r\n    | ReturnType<typeof AddTodoAC>\r\n    | ReturnType<typeof SetTodolistAC>","import {AnyAction, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsRedusers} from \"./todolists-reducer\";\r\nimport {tasksRedusers} from \"./tasks-reducer\";\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {loginReducer} from \"../Login/login-reducer\";\r\n\r\n\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists:todolistsRedusers,\r\n    tasks:tasksRedusers,\r\n    app:appReducer,\r\n    login:loginReducer\r\n})\r\n// type AppRootState={\r\n//     todolists:Array<TodolistType>,\r\n//     tasks:TodoTasksType\r\n// }\r\nexport const store=createStore(rootReducer,applyMiddleware(thunk))\r\n//export type AppRootState=ReturnType<typeof rootReducer>\r\nexport type RootState= ReturnType<typeof store.getState>\r\n\r\nexport type AppDispatch = ThunkDispatch<RootState, unknown, AnyAction>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,RootState, unknown, AnyAction>\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n//@ts-ignore\r\nwindow.store=store","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState, useAppDispatch} from \"./State/store\";\r\nimport {TodoTasksType} from \"./AppWhisRedux\";\r\nimport {setAppErrorAC} from \"./State/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function CustomizedSnackbars() {\r\n    const error=useSelector<RootState,string | null>(state => state.app.error)\r\n    const dispatch=useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n       dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n\r\n    const IsOpen= error != null\r\n    return (\r\n        <Stack spacing={2} sx={{ width: '100%' }}>\r\n            <Snackbar open={IsOpen} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">{error}</Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}\r\n","import React, {ChangeEvent, EventHandler,KeyboardEvent, KeyboardEventHandler, useState} from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {ControlPoint} from \"@mui/icons-material\";\r\n\r\ntype AddItemFormType = {\r\n    AddItem: (title: string) => void,\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm=React.memo((props: AddItemFormType)=> {\r\n    console.log(\"AddItemForm is colled\")\r\n    let [ButtonAdd, SetButtonAdd] = useState(\"\")\r\n    let [ErrorMesage, SetErrorMessage] = useState<string | null>(null)\r\n\r\n    const ChengeSetButtonAdd = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        SetButtonAdd(e.currentTarget.value)\r\n        SetErrorMessage(null)\r\n\r\n    }\r\n    const OnClikOnbutton = (e: string) => {\r\n        if (e.trim() != \"\") {\r\n            props.AddItem(e.trim())\r\n            SetButtonAdd(\"\")\r\n            SetErrorMessage(null)\r\n        } else {\r\n            SetErrorMessage(\"You need to write something\")\r\n        }\r\n    }\r\n    const OnKeyPres: EventHandler<KeyboardEvent<HTMLInputElement>> =(event)=>{\r\n        if(ErrorMesage !== null){\r\n            SetErrorMessage(null)\r\n        }\r\n        if (event.charCode == 13) {\r\n            OnClikOnbutton(ButtonAdd)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField onKeyPress={OnKeyPres}\r\n                       variant={\"outlined\"}\r\n                       label={\"Type value\"}\r\n                       onChange={(e) => {ChengeSetButtonAdd(e)}}\r\n                       error={!!ErrorMesage}\r\n                       value={ButtonAdd} type=\"text\"/>\r\n\r\n            <IconButton onClick={() => {OnClikOnbutton(ButtonAdd)}}  color={'primary'}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {ErrorMesage ? <div>{ErrorMesage}</div> : ''}\r\n        </div>\r\n    )\r\n})","import React, {useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    ChengeTaskName: (NewTitle: string) => void,\r\n}\r\n\r\nexport const EditableSpan =React.memo(function (props: EditableSpanType) {\r\n    console.log(\"EditableSpan\")\r\n    let [EditableSpan, SetEditableSpan] = useState(true)\r\n    let [Title, SetTitle] = useState(props.title)\r\n\r\n    let ChengeInput = (e: any) => {\r\n        SetTitle(e)\r\n    }\r\n\r\n    const ChenchDouble = (newPosichen: boolean) => {\r\n        SetEditableSpan(newPosichen)\r\n    }\r\n    const OnBlurReact=()=>{\r\n        props.ChengeTaskName(Title)\r\n        SetTitle(\"\")\r\n        SetEditableSpan(true)\r\n    }\r\n\r\n    return (EditableSpan\r\n            ?<span onDoubleClick={() => ChenchDouble(false)}>{props.title}</span>\r\n            : <TextField value={Title} onChange={(e) => ChengeInput(e.currentTarget.value)} onBlur={()=>OnBlurReact()} autoFocus/>\r\n    )\r\n\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TaskStatuses, TaskType} from \"./api/TodolistAPI\";\r\n\r\ntype TaskMapPropsType = {\r\n    removeTask: (id: string, todolistId: string) => void,\r\n    ChengeTaskName: (idTodo: string, idTask: string, NewTitle: string) => void,\r\n    chengeChecked: (id: string, status: TaskStatuses, todolistId: string) => void,\r\n    task: TaskType,\r\n    TodolistId: string\r\n}\r\nexport const TaskMap = React.memo((props: TaskMapPropsType) => {\r\n\r\n    const deleteFun = useCallback((id: string) => {\r\n        props.removeTask(props.task.id, props.TodolistId)\r\n    },[props.task.id, props.TodolistId])\r\n\r\n\r\n    const SaveInputChekedNameHendler = useCallback((NewName: string) => {\r\n        props.ChengeTaskName(props.TodolistId, props.task.id, NewName)\r\n    },[props.TodolistId,props.task.id, props.ChengeTaskName])\r\n\r\n    const onChangeStatus = useCallback((t: ChangeEvent<HTMLInputElement>) => {\r\n        //let newIsDoneValue = !props.task.status\r\n        let newIsDoneValue = t.currentTarget.checked\r\n        props.chengeChecked(props.task.id,newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.TodolistId)\r\n        debugger\r\n    },[props.task.id,props.TodolistId])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"Todolist-TasksList-ChekedTrue\" : \"\"} >\r\n            <Checkbox\r\n                checked={props.task.status===TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeStatus}/>\r\n\r\n            <EditableSpan ChengeTaskName={SaveInputChekedNameHendler} key={props.task.id} title={props.task.title}/>\r\n            <IconButton onClick={() => deleteFun(props.task.id)}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TaskMap} from \"./TaskMap\";\r\nimport {TaskStatuses, TaskType} from \"./api/TodolistAPI\";\r\nimport {FilterType, TodolistDomainType} from \"./State/todolists-reducer\";\r\nimport {useAppDispatch} from \"./State/store\";\r\nimport {fetchTasksTC} from \"./State/tasks-reducer\";\r\n\r\n\r\nexport  type PropsType = {\r\n    todolist:TodolistDomainType\r\n    ChengeTitleTodo: (idTodo: string, NewTitle: string) => void,\r\n    tasks: Array<TaskType>,\r\n    removeTask: (id: string, todolistId: string) => void,\r\n    ChengeTaskName: (idTodo: string, idTask: string, NewTitle: string) => void,\r\n    chengeChecked: (id: string, status: TaskStatuses, todolistId: string) => void,\r\n    FilterChenge: (param: FilterType, todolistId: string) => void,\r\n    AddNewTodoTask: (title: string, todolistId: string) => void,\r\n    DeleteTodo: (id: string) => void\r\n}\r\n\r\nexport const Todolists = React.memo(function (props: PropsType) {\r\n    const dispatch=useAppDispatch()\r\n\r\n    //todolist useCallback\r\n    const ChegeTitleTodo = useCallback((Newtitle: string) => {\r\n        props.ChengeTitleTodo(props.todolist.id, Newtitle)\r\n    }, [props.todolist.id, props.ChengeTitleTodo])\r\n    const removeTodolist = () => {\r\n        props.DeleteTodo(props.todolist.id)\r\n    }\r\n\r\n    //tasks useCallback\r\n    const addTask = useCallback((title: string) => {\r\n        props.AddNewTodoTask(title, props.todolist.id)\r\n    }, [props.AddNewTodoTask, props.todolist.id])\r\n\r\n    //filter useCallback\r\n    const FilterAll = useCallback(() => {\r\n        props.FilterChenge(\"All\", props.todolist.id)\r\n    }, [])\r\n    const FilterCompleted = useCallback(() => {\r\n        props.FilterChenge(\"Completed\", props.todolist.id)\r\n    }, [])\r\n    const FilterActive = useCallback(() => {\r\n        props.FilterChenge(\"Active\", props.todolist.id)\r\n    }, [])\r\n\r\n\r\n\r\n    let TaskForTodolist = props.tasks\r\n    if (props.todolist.filter === \"Completed\") {\r\n        TaskForTodolist = props.tasks.filter(e => e.status == TaskStatuses.Completed)\r\n    }\r\n    if (props.todolist.filter === \"Active\") {\r\n        TaskForTodolist = props.tasks.filter(e => e.status == TaskStatuses.New)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    },[])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={\"todolist\"}>\r\n            <h1>\r\n                <EditableSpan title={props.todolist.title} ChengeTaskName={ChegeTitleTodo}/>\r\n                <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading' }>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h1>\r\n\r\n            <AddItemForm key={props.todolist.id} AddItem={addTask} disabled={props.todolist.entityStatus === 'loading' }/>\r\n            <div>\r\n                {\r\n                    TaskForTodolist.map(e => <TaskMap\r\n                        key={e.id}\r\n                        TodolistId={props.todolist.id}\r\n                        ChengeTaskName={props.ChengeTaskName}\r\n                        removeTask={props.removeTask}\r\n                        chengeChecked={props.chengeChecked}\r\n                        task={e}\r\n                    />)\r\n                }\r\n            </div>\r\n            <Button variant={props.todolist.filter == \"All\" ? \"contained\" : \"outlined\"} onClick={() => {\r\n                FilterAll()\r\n            }}>All\r\n            </Button>\r\n            <Button variant={props.todolist.filter == \"Active\" ? \"contained\" : \"outlined\"} onClick={() => {\r\n                FilterActive()\r\n            }}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter == \"Completed\" ? \"contained\" : \"outlined\"} onClick={() => {\r\n                FilterCompleted()\r\n            }}>Completed\r\n            </Button>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState, useAppDispatch} from \"./State/store\";\r\nimport {\r\n    addTodolistTC,\r\n    ChangeIsdoneTodoAC,\r\n    ChehgeTitleTodolistTC,\r\n    deleteTodolistTC,\r\n    fetchTodolistTC,\r\n    FilterType,\r\n    TodolistDomainType\r\n} from \"./State/todolists-reducer\";\r\nimport {addTaskTC, deleteTasksTC, updateTaskStatusTC} from \"./State/tasks-reducer\";\r\nimport {TaskStatuses} from \"./api/TodolistAPI\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Todolists} from \"./Todolists\";\r\nimport {TodoTasksType} from \"./AppWhisRedux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype TodolistListPropsType = {}\r\nexport const TodolistList: React.FC<TodolistListPropsType> = (props) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    const isLoggedIn = useSelector<RootState, boolean>(state => state.login.isLoginIn)\r\n    const TodolistData = useSelector<RootState, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasksObj = useSelector<RootState, TodoTasksType>(state => state.tasks)\r\n\r\n\r\n    //call thunks\r\n    useEffect(() => {\r\n        if (!isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(fetchTodolistTC())\r\n    }, [])\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(deleteTasksTC(todolistId, id))\r\n    }, [dispatch])\r\n    const AddNewTodoTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, [dispatch])\r\n    const ChengeTitleTodo = useCallback(function (idTodo: string, NewTitle: string) {\r\n        dispatch(ChehgeTitleTodolistTC(idTodo, NewTitle))\r\n    }, [dispatch])\r\n    const ChengeTaskTitle = useCallback(function (idTodo: string, idTask: string, title: string) {\r\n        dispatch(updateTaskStatusTC(idTodo, {title}, idTask))\r\n    }, [dispatch])\r\n    const DeleteTodo = useCallback(function (id: string) {\r\n        dispatch(deleteTodolistTC(id))\r\n    }, [dispatch])\r\n    const chengeTaskChecked = useCallback(function (idTask: string, status: TaskStatuses, idTodo: string) {\r\n        dispatch(updateTaskStatusTC(idTodo, {status}, idTask))\r\n    }, [dispatch])\r\n    const chengeTasksFilter = useCallback(function (value: FilterType, todolistId: string) {\r\n        dispatch(ChangeIsdoneTodoAC(value, todolistId))\r\n    }, [dispatch])\r\n    const AddTodolistButtonProps = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    if (!isLoggedIn){\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n\r\n\r\n    return <>\r\n        <p>hello</p>\r\n        <Grid container style={{padding: \"20px 0px 20px 0px\"}}>\r\n            <AddItemForm AddItem={AddTodolistButtonProps}/>\r\n        </Grid>\r\n        <Grid container spacing={10}>\r\n            {TodolistData.map((tl) => {\r\n\r\n                // get tasks\r\n                let taskfortodolist = tasksObj[tl.id]\r\n\r\n                return (\r\n                    <Grid key={tl.id} item>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolists\r\n                                todolist={tl}\r\n                                key={tl.id}\r\n                                ChengeTitleTodo={ChengeTitleTodo}\r\n                                ChengeTaskName={ChengeTaskTitle}\r\n                                tasks={taskfortodolist}\r\n                                removeTask={removeTask}\r\n                                FilterChenge={chengeTasksFilter}\r\n                                chengeChecked={chengeTaskChecked}\r\n                                DeleteTodo={DeleteTodo}\r\n                                AddNewTodoTask={AddNewTodoTask}/>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                )\r\n            })}\r\n        </Grid>\r\n\r\n    </>\r\n}","import {Box, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {useFormik} from \"formik\";\r\nimport React from \"react\";\r\nimport {loginTC} from \"./login-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState, useAppDispatch} from \"../State/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nexport const Login = () => {\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoginIn = useSelector<RootState, boolean>(state => state.login.isLoginIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n    if (isLoginIn){\r\n        return <Navigate  to={\"/\"} />\r\n    }\r\n    return (\r\n\r\n        <Box sx={{flexGrow: 1}}>\r\n            <Grid container justifyContent={'center'}>\r\n                <Grid item justifyContent={'center'}>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormLabel>\r\n                                <p>To log in get registered\r\n                                    <a href={'https://social-network.samuraijs.com/'}\r\n                                       target={'_blank'}> here\r\n                                    </a>\r\n                                </p>\r\n                                <p>or use common test account credentials:</p>\r\n                                <p>Email: free@samuraijs.com</p>\r\n                                <p>Password: free</p>\r\n                            </FormLabel>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps(\"email\")}\r\n                                />\r\n                                {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                                <TextField\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps(\"password\")}\r\n                                />\r\n                                {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                                <FormControlLabel\r\n                                    label={'Remember me'}\r\n                                    control={<Checkbox\r\n                                        {...formik.getFieldProps(\"rememberMe\")}\r\n                                        checked={formik.values.rememberMe}\r\n                                    />}\r\n                                />\r\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n\r\n\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {TaskStatuses, TaskType} from \"./api/TodolistAPI\";\r\nimport {CustomizedSnackbars} from \"./ErrorSnakBar\";\r\nimport {TodolistList} from \"./TodolistList\";\r\nimport {BrowserRouter as Router, NavLink} from \"react-router-dom\";\r\nimport {Login} from \"./Login/Login\";\r\nimport { Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState, useAppDispatch} from \"./State/store\";\r\nimport {initializeAppTC} from \"./State/app-reducer\";\r\nimport {logoutTC} from \"./Login/login-reducer\";\r\n\r\n\r\n\r\nexport  type TodoTasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWhisRedux() {\r\n    const dispatch = useAppDispatch()\r\n    const isInitialized = useSelector<RootState, boolean>(state => state.app.initialized)\r\n    const isLoginIn = useSelector<RootState, boolean>(state => state.login.isLoginIn)\r\n    const status = useSelector<RootState, string>(state => state.app.status)\r\n\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    const logoutHandler=useCallback(()=>{\r\n        dispatch(logoutTC())\r\n    },[])\r\n\r\nif (!isInitialized){\r\n    return <div style={{position:\"fixed\",top:'30%',textAlign:\"center\",width:'100%'}}>\r\n        <CircularProgress />\r\n    </div>\r\n}\r\n\r\n    return (\r\n\r\n            <div className=\"App\">\r\n                <NavLink to={'/'}>go main1</NavLink>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoginIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n                </AppBar>\r\n\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path=\"/\" element={ <TodolistList/>}/>\r\n                        <Route  path=\"login\" element={ <Login/> }/>\r\n\r\n                        <Route path=\"/404\" element={<h1>404. Page not found</h1> }/>\r\n                        <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                    </Routes>\r\n                </Container>\r\n\r\n                <CustomizedSnackbars/>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default AppWhisRedux;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AppWhisRedux from \"./AppWhisRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./State/store\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\n\r\nconst root = ReactDOM.createRoot(\r\n    document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n    // <React.StrictMode>\r\n    <Provider store={store}>\r\n        <Router>\r\n            <AppWhisRedux/>\r\n        </Router>\r\n    </Provider>\r\n    // </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}